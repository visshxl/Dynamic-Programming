https://leetcode.com/problems/house-robber-ii/description/
class Solution {
public:
    // tabulation with space optimization solution from house robber 1
    int robber(vector<int>& nums) {
        int prev2=0;
        int curr;
        int prev=nums[0];
        for(int i=1; i<nums.size(); i++){
            int take=nums[i];
            if(i>1) take+=prev2; // in bound condition
            int notTake=prev;
            curr=max(take, notTake);
            prev2=prev;
            prev=curr;
        }
        return prev;
    }


    int rob(vector<int>& nums) {
        if(nums.size()==1) return nums[0];
        vector<int> num1, nums2;
        for(int i=0; i<nums.size(); i++){
            if(i!=0) num1.push_back(nums[i]);
            if(i!=nums.size()-1) nums2.push_back(nums[i]);
        }
        return max(robber(num1), robber(nums2));
    }
};
// strivers dp series
