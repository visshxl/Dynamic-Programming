https://www.geeksforgeeks.org/problems/perfect-sum-problem5633/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=perfect-sum-problem
class Solution{

	public:
	int mod=1000000007; // for bigger testcases
	int totalSubsets(int ind, int arr[], int sum, vector<vector<int>>& dp){
	    if(ind==0){
	       // in case of zero the possible outcome can be 2 - take 0 or not take
	        if(sum==0 && arr[0]==0) return 2; 
	        else if(sum==0 && arr[0]!=0) return 1;
	        else if(arr[0]==sum) return 1;
	        return 0;
	    }
	    
	    if(dp[ind][sum]!=-1) return dp[ind][sum];
	    int take=0;
	    if(arr[ind]<=sum) take=totalSubsets(ind-1, arr, sum-arr[ind], dp);
	    int notTake=totalSubsets(ind-1, arr, sum, dp);
	   // modding as per the question's requirement
	    return dp[ind][sum]=(take%mod+notTake%mod)%mod;
	}
        // return totalSubsets(n-1, arr, sum, dp);
	
	// tabulation
	int perfectSum(int arr[], int n, int sum){
        vector<vector<int>> dp(n, vector<int>(sum+1, 0));
        if(arr[0]==0) dp[0][0]=2; // zero edge case 
	    else dp[0][0]=1;
	    
	    if(arr[0]!=0 && arr[0]<=sum) dp[0][arr[0]]=1;
	    for(int ind=1; ind<n; ind++){
	        for(int target=0; target<=sum; target++){
	            int take=0;
        	    if(arr[ind]<=target) take=dp[ind-1][target-arr[ind]];
        	    int notTake=dp[ind-1][target];
                dp[ind][target]=(take+notTake)%mod;
	        }
	    }
	    return dp[n-1][sum];
	}
};
// striver dp 17
