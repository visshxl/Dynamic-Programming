https://leetcode.com/problems/target-sum/
class Solution {
public:
// same as dp18 count partition with given difference on gfg
// finding the no of subsets for the given target
// tabulation with space optimization
    int findTargetSumWays(vector<int>& nums, int target) {
        int total_sum=accumulate(nums.begin(), nums.end(), 0);
        if((total_sum-target)%2 || total_sum-target<0) return 0;

        int newTarget=(total_sum-target)/2;
        vector<int> prev(newTarget+1, 0);
        vector<int> curr(newTarget+1, 0);
         // Initial conditions
        if (nums[0] == 0) 
            prev[0] = 2; // Two ways to form 0: with +0 and -0
        else 
            prev[0] = 1; // Only one way to form 0: without using the first element
        
        if (nums[0] != 0 && nums[0] <= newTarget) 
            prev[nums[0]] = 1; // Only one way to form nums[0]: using the first element


        for(int ind=1; ind<nums.size(); ind++){
            for(int sum=0; sum<=newTarget; sum++){
                int not_take=prev[sum];
                int take=0;
                if(nums[ind]<=sum) take=prev[sum-nums[ind]];
                curr[sum]=take + not_take;
            }
            prev=curr;
        }
        return prev[newTarget];
    }
};
// // memoization:-
// int findTotalSubsets(int ind, int target, vector<vector<int>>& dp, vector<int>& nums){
//     if(ind==0){
//         if(target==0 && nums[0]==0) return 2;// Two ways to form 0: with +0 and -0
//         else if(target==0 || nums[0]==target) return 1;
//         return 0;
//     }

//     if(dp[ind][target]!=-1) return dp[ind][target];

//     int not_take=findTotalSubsets(ind-1, target, dp, nums);
//     int take=0;
//     if(nums[ind]<=target) take=findTotalSubsets(ind-1, target-nums[ind], dp, nums);
//     return dp[ind][target]=take + not_take;
// }

// int findTargetSumWays(vector<int>& nums, int target) {
//     int total_sum=accumulate(nums.begin(), nums.end(), 0);

//     if((total_sum-target)%2 || total_sum-target<0) return 0;

//     int newTarget=(total_sum-target)/2;
//     vector<vector<int>> dp(nums.size(), vector<int>(newTarget+1, -1));
//     return findTotalSubsets(nums.size()-1, newTarget, dp, nums);
// }
