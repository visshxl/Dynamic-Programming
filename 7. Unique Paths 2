https://leetcode.com/problems/unique-paths-ii/
class Solution {
public:
// tabulation with space optimisation 
    int uniquePathsWithObstacles(vector<vector<int>>& grid) {
        int m=grid.size(), n=grid[0].size();
        vector<int> prev(n, 0);

        for(int i=0; i<m; i++){
            vector<int> curr(n, 0);
            for(int j=0; j<n; j++){
                if(i==0 && j==0 && !grid[i][j]){
                    curr[j]=1;
                }else if(grid[i][j]==1){ // condtion to check the path that cant be visited
                    curr[j]=0;
                }else{
                    int up=0, left=0;
                    if(i>0) up=prev[j];
                    if(j>0) left=curr[j-1];
                    curr[j]=up+left;
                }
            }
            prev=curr;
        }
        return prev[n-1];
    }
};
// // tabulation
//     int uniquePathsWithObstacles(vector<vector<int>>& grid) {
//         int m=grid.size(), n=grid[0].size();
//         vector<vector<int>> dp(m, vector<int>(n, 0));

//         for(int i=0; i<m; i++){
//             for(int j=0; j<n; j++){
//                 if(i==0 && j==0 && !grid[i][j]){
//                     dp[i][j]=1;
//                 }else if(grid[i][j]==1){ // condtion to check the path that cant be visited
//                     dp[i][j]=0;
//                 }else{
//                     int up=0, left=0;
//                     if(i>0) up=dp[i-1][j];
//                     if(j>0) left=dp[i][j-1];
//                     dp[i][j]=up+left;
//                 }
//             }
//         }
//         return dp[m-1][n-1];
//     }
// // memoization same as the unique paths 1 just one new condtion added
//     int findPaths(int row, int col, vector<vector<int>>& grid, vector<vector<int>>& dp){
//         if(row==0 && col==0 && grid[0][0]!=1) return 1;
//         if(row<0 || col<0 || grid[row][col]) return 0; 

//         if(dp[row][col]!=-1) return dp[row][col];
//         int up=findPaths(row-1, col, grid, dp);
//         int left=findPaths(row, col-1, grid, dp);
//         return dp[row][col]=up+left;
//     }

//     int uniquePathsWithObstacles(vector<vector<int>>& grid) {
//         vector<vector<int>> dp(grid.size(), vector<int>(grid[0].size(), -1));
//         return findPaths(grid.size()-1, grid[0].size()-1, grid, dp);
//     }
// };
