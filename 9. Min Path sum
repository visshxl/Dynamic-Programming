https://leetcode.com/problems/minimum-path-sum/
class Solution {
public:
// tabulation with space optimisation
    int minPathSum(vector<vector<int>>& grid) {
        int m=grid.size();
        int n=grid[0].size();
        vector<int> prev(n, 0);

        for(int i=0; i<m; i++){
            vector<int> curr(n, 0);
            for(int j=0; j<n; j++){
                if(i==0 && j==0){
                    curr[0]=grid[0][0]; // base
                }else{
                    int up=INT_MAX, left=INT_MAX; // reccurence realtion of recursion
                    if(i>0) up=grid[i][j]+prev[j];
                    if(j>0) left=grid[i][j]+curr[j-1];
                    curr[j]=min(up, left);
                }
            }
            prev=curr;
        }
        return prev[n-1];
    }
};
// // tabulation
//     int minPathSum(vector<vector<int>>& grid) {
//         int m=grid.size();
//         int n=grid[0].size();
//         vector<vector<int>> dp(m, vector<int>(n, -1));

//         for(int i=0; i<m; i++){
//             for(int j=0; j<n; j++){
//                 if(i==0 && j==0){
//                     dp[0][0]=grid[0][0]; // base
//                 }else{
//                     int up=INT_MAX, left=INT_MAX; // reccurence realtion of recursion
//                     if(i>0) up=grid[i][j]+dp[i-1][j];
//                     if(j>0) left=grid[i][j]+dp[i][j-1];
//                     dp[i][j]=min(up, left);
//                 }
//             }
//         }
//         return dp[m-1][n-1];
//     }
// };
// // memoization
//     int MinSum(int row, int col, vector<vector<int>>& grid, vector<vector<int>>& dp){
//         if(row==0 && col==0) return grid[0][0]; // base condition
//         if(row<0 || col<0) return 50000; // returning the greater no than the constraints

//         if(dp[row][col]!=-1) return dp[row][col];

//         int up=grid[row][col]+MinSum(row-1, col, grid, dp);
//         int left=grid[row][col]+MinSum(row, col-1, grid, dp);
//         return dp[row][col]=min(up, left);
//     }

//     int minPathSum(vector<vector<int>>& grid) {
//         int m=grid.size();
//         int n=grid[0].size();
//         vector<vector<int>> dp(m, vector<int>(n, -1));
//         return MinSum(m-1, n-1, grid, dp);
//     }
// };
